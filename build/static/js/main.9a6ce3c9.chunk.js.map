{"version":3,"sources":["actions/ActionTypes.js","reducers/reducers.js","reducers/GreetingsReducers.js","store/configureStore.js","actions/GreetingsActions.js","components/Greetings.js","App.js","registerServiceWorker.js","index.js"],"names":["ActionTypes","FETCH_MESSAGE_REQUESTED","FETCH_MESSAGE_SUCCEEDED","FETCH_MESSAGE_FAILURE","reducers","combineReducers","greetings","state","arguments","length","undefined","message","action","type","AT","Object","objectSpread","payload","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","fetchMessage","dispatch","fetch","method","mode","headers","Content-Type","Accept","then","response","json","catch","error","console","log","Greetings","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","handleChange","e","setState","target","value","_this2","react_default","a","createElement","onSubmit","className","color","onChange","Component","connect","ownProps","bindActionCreators","App","react","BrowserRouter","Switch","Route","path","component","Redirect","from","exact","to","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","configureStore","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9a6ce3c9.chunk.js","sourcesContent":["const ActionTypes = {\n  // Greetings\n  FETCH_MESSAGE_REQUESTED: 'FETCH_MESSAGE_REQUESTED',\n  FETCH_MESSAGE_SUCCEEDED: 'FETCH_MESSAGE_SUCCEEDED',\n  FETCH_MESSAGE_FAILURE: 'FETCH_MESSAGE_FAILURE'\n};\n\nexport default ActionTypes;\n","import { combineReducers } from 'redux';\nimport { greetings } from './GreetingsReducers';\n\nconst reducers = combineReducers({\n  greetings\n});\n\nexport default reducers;\n","import AT from '../actions/ActionTypes';\n\nexport const greetings = (state = { message: '' }, action) => {\n  switch (action.type) {\n    case AT.FETCH_MESSAGE_SUCCEEDED:\n      return {\n        ...state,\n        message: action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport reducers from '../reducers/reducers';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers, composeEnhancer(applyMiddleware(thunk)));\n\nexport default store;\n","import AT from './ActionTypes';\n\nexport const fetchMessage = () => {\n  return dispatch => {\n    return fetch('/items/message', {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    })\n      .then(response => {\n        dispatch({\n          type: AT.FETCH_MESSAGE_SUCCEEDED,\n          payload: response.json()\n        });\n      })\n      .catch(error => {\n        console.log('Request failed', error);\n      });\n  };\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n/* Actions */\nimport { fetchMessage } from '../actions/GreetingsActions';\n\nclass Greetings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: this.props.message\n    };\n  }\n\n  handleSubmit = () => {\n    debugger;\n    this.props.fetchMessage();\n  };\n\n  handleChange = e => {\n    this.setState({\n      message: e.target.value\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div>\n          <input\n            className={{ color: 'blue' }}\n            type={'text'}\n            value={this.state.message}\n            onChange={e => this.handleChange(e)}\n          />\n          <button type={'submit'}>{'Get Message'}</button>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    message: state.greetings.message\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return bindActionCreators(\n    {\n      fetchMessage\n    },\n    dispatch\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Greetings);\n","import React, { Component, Fragment } from 'react';\nimport { Route, Redirect, Switch, BrowserRouter } from 'react-router-dom';\nimport Greetings from './components/Greetings';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <main className=\"container\">\n          <BrowserRouter>\n            <Switch>\n              <Route path=\"/greetings\" component={Greetings} />\n              <Redirect from=\"/\" exact to=\"/greetings\" />\n              <Redirect to=\"/not-found\" />\n            </Switch>\n          </BrowserRouter>\n        </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nconst store = configureStore;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}